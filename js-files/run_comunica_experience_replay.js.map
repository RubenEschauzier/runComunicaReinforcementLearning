{"version":3,"file":"run_comunica_experience_replay.js","sourceRoot":"","sources":["../run_comunica_experience_replay.ts"],"names":[],"mappings":"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","sourcesContent":["import {BindingsStream, IBatchedTrainingExamples, ITrainEpisode, ITrainingExample} from \"@comunica/types\";\nimport {IAggregateValues, IResultSetRepresentation, IRunningMoments} from \"@comunica/mediator-join-reinforcement-learning\";\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as tf from '@tensorflow/tfjs-node'\nimport { ExperienceBuffer, IExperience, IExperienceKey, keyToIdx, updateRunningMoments } from \"./helper\";\n\n\n// MUST READ: https://lwn.net/Articles/250967/\n\nclass trainComunicaModel{\n    public engine: any;\n    public queries: string[];\n    public valQueries:string[];\n    public batchedTrainingExamples: IBatchedTrainingExamples;\n    public batchedValidationExamples: IBatchedTrainingExamples;\n    public runningMomentsExecutionTime: IRunningMoments;\n    public experienceBuffer: ExperienceBuffer;\n\n    public constructor(bufferSize: number){\n        const QueryEngine = require('@comunica/query-sparql-file').QueryEngineFactory;\n        this.engine = new QueryEngine().create();\n        this.batchedTrainingExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n        this.batchedValidationExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n        this.queries=[];\n        this.valQueries=[];\n        this.runningMomentsExecutionTime = {indexes: [0], runningStats: new Map<number, IAggregateValues>()};\n        for (const index of this.runningMomentsExecutionTime.indexes){\n            const startPoint: IAggregateValues = {N: 0, mean: 0, std: 1, M2: 1}\n            this.runningMomentsExecutionTime.runningStats.set(index, startPoint);\n        }\n\n        this.experienceBuffer = new ExperienceBuffer(bufferSize, this.queries.length);\n    }\n\n    public async executeQueryTrain(query: string, sources:string[], train:boolean, queryKey: string, runningMomentsFeatureFile?: string){\n        const starthrTime: number[] = process.hrtime();\n        const startTime: number = starthrTime[0] + starthrTime[1] / 1000000000;\n        const bindingsStream: BindingsStream = await this.engine.queryBindings(query, {sources: sources, batchedTrainingExamples: this.batchedTrainingExamples,\n        runningMomentsFeatureFile: runningMomentsFeatureFile, train: train});\n        if (train){\n            if (this.engine.trainEpisode.joinsMade.length==0){\n                this.engine.disposeTrainEpisode();\n                this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n                return;\n                // throw new Error(\"Training episode contained 0 joins\");\n            }\n            const joinOrderKeys: string[] = [];\n            // Get joins made in this query to update\n            for (let i = 1; i <this.engine.trainEpisode.joinsMade.length+1;i++){\n                const joinIndexId = this.engine.trainEpisode.joinsMade.slice(0, i);\n                joinOrderKeys.push(this.idxToKey(joinIndexId));\n            }\n            await this.addListener(bindingsStream, startTime, joinOrderKeys, queryKey, false, true);\n\n            // Clear episode tensors\n            this.engine.disposeTrainEpisode();\n            this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n        }\n        return;\n    }\n\n    public async executeQueryValidation(query: string, sources:string[], queryKey: string){\n        const startTime: number = this.getTimeSeconds();\n        const bindingsStream: BindingsStream = await this.engine.queryBindings(query, {sources: sources, \n            batchedTrainingExamples: this.batchedValidationExamples, train: true});\n        const joinOrderKeys: string[] = [];\n        for (let i = 1; i <this.engine.trainEpisode.joinsMade.length+1;i++){\n            const joinIndexId = this.engine.trainEpisode.joinsMade.slice(0, i);\n            joinOrderKeys.push(this.idxToKey(joinIndexId));\n        }    \n        const exeuctionTimeRaw: number = await this.addListener(bindingsStream, startTime, joinOrderKeys, queryKey, true, false);\n        this.engine.disposeTrainEpisode();\n        this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n        return exeuctionTimeRaw;\n    }\n\n    public async executeQueryInitFeaturesBuffer(query: string, sources:string[]){\n        const startTime: number = this.getTimeSeconds();\n        const bindingsStream: BindingsStream = await this.engine.queryBindings(query, {sources: sources, \n            batchedTrainingExamples: this.batchedValidationExamples, train: true});\n        const leafFeatures: IResultSetRepresentation = {hiddenStates: this.batchedValidationExamples.leafFeatures.hiddenStates.map(x=>x.clone()),\n        memoryCell: this.batchedValidationExamples.leafFeatures.memoryCell.map(x=>x.clone())};\n\n        this.engine.disposeTrainEpisode();\n        this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n        this.cleanBatchTrainingExamplesValidation();\n        return leafFeatures;\n    }\n\n    public cleanBatchTrainingExamples(){\n        this.batchedTrainingExamples.leafFeatures.hiddenStates.map(x =>x.dispose());\n        this.batchedTrainingExamples.leafFeatures.memoryCell.map(x=>x.dispose());\n        this.batchedTrainingExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n    }\n\n    public cleanBatchTrainingExamplesValidation(){\n        this.batchedValidationExamples.leafFeatures.hiddenStates.map(x=>x.dispose());\n        this.batchedValidationExamples.leafFeatures.memoryCell.map(x=>x.dispose());\n        this.batchedValidationExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n    }\n\n\n    public async loadWatDivQueries(queryDir: string, val:boolean){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                // Get the files as an array\n                const files = await fs.promises.readdir( queryDir );\n                for( const file of files ) {\n                    // Get the full paths\n                    const filePath = path.join( queryDir, file );    \n                    const data = fs.readFileSync(filePath,'utf8');\n                    if (val){\n                        this.valQueries.push(data);\n                    }\n                    else{\n                        this.queries.push(data);\n                    }\n                }\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public getNextVersion(queryDir: string){\n        // Get the next number in the experiments directory\n        const versionsMade = fs.readdirSync( queryDir, { withFileTypes: true })\n        .filter((item) => item.isDirectory())\n        .map((item) => parseInt(item.name.replace(/^\\D+/g, '')));\n\n        if (versionsMade.length==0){\n            return 1;\n        }\n        else{\n            return Math.max(...versionsMade)+1;\n        }\n    }\n\n    public addListener(bindingStream: BindingsStream, startTime: number, joinsMadeEpisode: string[], queryKey: string, \n        validation: boolean, recordExperience: boolean): Promise<number>{\n        /**\n         * Function that consumes the binding stream, measures elapsed time, and updates the batchTrainEpisode\n         */\n        const finishedReading: Promise<number> = new Promise((resolve, reject) => {\n                bindingStream.on('data', (binding: any) => {\n                });\n                \n                bindingStream.on('end', () => {\n                    const endTime: number = this.getTimeSeconds();\n                    const elapsed: number = endTime-startTime;\n                    const statsY: IAggregateValues = this.runningMomentsExecutionTime.runningStats.get(this.runningMomentsExecutionTime.indexes[0])!;\n\n                    if (!validation){\n                        updateRunningMoments(statsY, elapsed);\n                    }\n\n                    const standardisedElapsed = (elapsed - statsY.mean) / statsY.std;\n                    for (const joinMade of joinsMadeEpisode){\n                        const trainingExample: ITrainingExample | undefined = validation ? this.batchedValidationExamples.trainingExamples.get(joinMade) :\n                        this.batchedTrainingExamples.trainingExamples.get(joinMade);\n                        if (!trainingExample){\n                            throw new Error(\"Training example given that is not in batched episode\");\n                        }\n                        const newExperience: IExperience = {actualExecutionTimeRaw: elapsed, actualExecutionTimeNorm: standardisedElapsed, \n                            joinIndexes: keyToIdx(joinMade), N:1};\n                        if (recordExperience){\n                            this.experienceBuffer.setExperience(queryKey, joinMade, newExperience, statsY);\n                        }\n                    }\n                    resolve(elapsed);\n                })    \n        });\n        return finishedReading;\n    }\n    \n    public async awaitEngine(){\n        this.engine = await this.engine\n    }\n\n    public getTimeSeconds(){\n        const hrTime: number[] = process.hrtime();\n        const time: number = hrTime[0] + hrTime[1] / 1000000000;\n        return time\n    }\n\n    protected idxToKey(indexes: number[][]){\n        return indexes.flat().toString().replaceAll(',', '');\n    }\n}\n\nconst numSim = 2;\nconst numSimVal = 2;\nconst numExperiencePerSim = 8;\nconst nEpochs = 10;\nconst pathRunningMoments = \"../../actor-rdf-join-inner-multi-reinforcement-learning-tree/model/moments/\";\nconst pathEpochInfos: string[] = [\"avgTrainLoss.txt\", \"avgValLoss.txt\",\"stdValLoss.txt\", \"avgValExecutionTime.txt\"];\n\nconst zeroJoinsFound = new Map<string, number>();\n\nconst trainEngine = new trainComunicaModel(1000);\nconst nextModelVersion = trainEngine.getNextVersion(path.join(__dirname, '../log'));\nconst nextModelLocation = path.join(__dirname, \"../log/model-version-exp-replay-\"+nextModelVersion);\nconst loadingTrain = trainEngine.loadWatDivQueries('output/queries', false);\nconst loadingValidation = trainEngine.loadWatDivQueries('missingGenreOutput/queriesVal', true);\n\nconst totalEpochTrainLoss: number[] = [];\nconst epochValLoss: number[] = [];\nconst epochValExecutionTime: number[] = [];\nconst epochValStdLoss: number[] = [];\n\nfs.mkdir(nextModelLocation, (err)=>{\n    if (err){\n        return console.error(err);\n    }\n});\n// FOR DEBUGGING\nError.stackTraceLimit = Infinity;\nloadingTrain.then(async ()=>{\n    let cleanedQueries: string[][] = trainEngine.queries.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT'));\n    await trainEngine.awaitEngine();\n    // await trainEngine.executeQueryTrain('SELECT' + cleanedQueries[1][1], [\"output/dataset.nt\"], false);\n    await initialiseFeaturesExperienceBuffer(trainEngine.experienceBuffer, cleanedQueries);\n    for (let epoch=0;epoch<nEpochs; epoch++){\n        let epochTrainLoss = [];\n        for (let i=0;i<cleanedQueries.length;i++){\n            const querySubset: string[] = [... cleanedQueries[i]];\n            querySubset.shift();\n\n            console.log(`Query Template ${i+1}/${cleanedQueries.length}`);\n            console.log(querySubset[0]);\n\n            for (let j=0;j<querySubset.length;j++){\n\n                const queryKey: string = `${i}`+`${j}`;\n                for (let k=0;k<numSim;k++){\n                    await trainEngine.executeQueryTrain('SELECT' + querySubset[j], [\"output/dataset.nt\"], true, queryKey);\n                    const experiences: IExperience[] = [];\n                    const features = [];                    \n                    // Sample experiences from the buffer if we have enough prior executions\n                    if (trainEngine.experienceBuffer.getSize()>30){\n                        for (let z=0;z<numExperiencePerSim;z++){\n                            const experience: [IExperience, IExperienceKey] = trainEngine.experienceBuffer.getRandomExperience();\n                            experiences.push(experience[0]);\n                            const feature = trainEngine.experienceBuffer.getFeatures(experience[1].query)!;\n                            features.push(feature);\n                        }\n                        const loss = await trainEngine.engine.trainModelExperienceReplay(experiences, features);\n                        epochTrainLoss.push(loss);\n                    }\n                }\n\n                trainEngine.cleanBatchTrainingExamples();\n            } \n        }\n        const avgLossTrain = epochTrainLoss.reduce((a, b) => a + b, 0) / epochTrainLoss.length;\n        console.log(\"Start\")\n        const [avgExecution, avgExecutionTemplate, stdExecutionTemplate, avgLoss, stdLoss] = await validatePerformance(trainEngine.valQueries);\n        console.log(\"Hello?\")\n        console.log(`Epoch ${epoch+1}/${nEpochs}: Train Loss: ${avgLossTrain}, Validation Execution time: ${avgExecution}, Loss: ${avgLoss}, Std: ${stdLoss}`);\n\n        // Checkpointing\n        const checkPointLocation = path.join(nextModelLocation + \"/chkp-\"+epoch);\n\n        fs.mkdir(checkPointLocation, (err)=>{\n            if (err){\n                return console.error(err);\n            }\n        });\n\n        const epochStatisticsLocation = pathEpochInfos.map(x=>path.join(checkPointLocation, x));\n        console.log(epochStatisticsLocation)\n\n        totalEpochTrainLoss.push(avgLossTrain); epochValLoss.push(avgLoss); epochValExecutionTime.push(avgExecution); epochValStdLoss.push(stdLoss);    \n        writeEpochFiles(epochStatisticsLocation, [totalEpochTrainLoss, epochValLoss, epochValStdLoss, epochValExecutionTime], epoch);\n    }\n    fs.writeFileSync('log/skippedQueries.json', JSON.stringify([...zeroJoinsFound]) , 'utf-8'); \n    trainEngine.engine.saveModel(pathRunningMoments+\"runningMomentsFeatures\"+1+\".json\");  \n});\n\nasync function validatePerformance(queries: string[]):Promise<[number, number[], number[], number, number]>{\n    console.log(\"Running validation\");\n    await loadingValidation;\n    let cleanedQueries: string[][] = trainEngine.valQueries.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT'));\n    const rawExecutionTimesTemplate: number[][] = [];\n    for(let i=0;i<cleanedQueries.length;i++){\n        const rawExecutionTimes: number[] = []\n        const querySubset: string[] = [... cleanedQueries[i]];\n        querySubset.shift();\n        // Start at j=1 because first element is empty\n        for (let j=0;j<querySubset.length;j++){\n            const queryKey: string = `${i}`+`${j}`;\n            // Because complex queries are all the same, we have only one per template, we skew training execution to small time elapsed, \n            // should prob do something about that? Like add back the complex queries??\n            for (let k=0;k<numSimVal;k++){\n                const executionTimeRaw: number = await trainEngine.executeQueryValidation('SELECT' + querySubset[j], [\"missingGenreOutput/dataset.nt\"], queryKey);\n                rawExecutionTimes.push(executionTimeRaw);\n            }\n        }\n\n        rawExecutionTimesTemplate.push(rawExecutionTimes);\n    }\n    // Get raw validaiton execution time statistics\n    const flatExeTime: number[] = rawExecutionTimesTemplate.flat();\n    const avgExecutionTime = flatExeTime.reduce((a, b) => a + b, 0) / flatExeTime.length;\n    const avgExecutionTimeTemplate = rawExecutionTimesTemplate.map(x=>(x.reduce((a,b)=> a+b,0))/x.length);\n    const stdExecutionTimeTemplate = [];\n\n    for (let k=0;k<avgExecutionTimeTemplate.length;k++){\n        stdExecutionTimeTemplate.push(stdArray(rawExecutionTimesTemplate[k],avgExecutionTimeTemplate[k]))\n    }\n    // Get validation loss\n    const MSE: number[] = [];\n    for (const [_, trainExample] of trainEngine.batchedValidationExamples.trainingExamples.entries()){\n        const singleMSE = (trainExample.qValue - trainExample.actualExecutionTime)**2;\n        MSE.push(singleMSE);\n    }\n    const averageLoss = MSE.reduce((a,b)=> a+b,0)/MSE.length;\n    const stdLoss = stdArray(MSE, averageLoss);\n\n    // Clean batch after validation\n    trainEngine.cleanBatchTrainingExamplesValidation();\n    console.log(\"DONE?\")\n    return [avgExecutionTime, avgExecutionTimeTemplate, stdExecutionTimeTemplate, averageLoss, stdLoss];\n}\n\nasync function initialiseFeaturesExperienceBuffer(buffer: ExperienceBuffer, queries: string[][]){\n\n    for(let i=0;i<queries.length;i++){\n        const rawExecutionTimes: number[] = []\n        const querySubset: string[] = [... queries[i]];\n        querySubset.shift();\n        // Start at j=1 because first element is empty\n        for (let j=0;j<querySubset.length;j++){\n            const queryKey: string = `${i}`+`${j}`;\n            const features: IResultSetRepresentation = await trainEngine.executeQueryInitFeaturesBuffer('SELECT' + querySubset[j], \n            [\"missingGenreOutput/dataset.nt\"]);\n            buffer.setLeafFeaturesQuery(queryKey, features);\n        }\n    }\n\n    return\n}\nfunction stdArray(values: number[], mean: number){\n    const std: number = Math.sqrt((values.map(x=>(x-mean)**2).reduce((a, b)=>a+b,0) / values.length));\n    return std\n}\n\nfunction writeEpochFiles(fileLocations: string[], epochInformation: number[][], epochNum: number){\n    for (let i=0;i<fileLocations.length;i++){\n        fs.writeFileSync(fileLocations[i], JSON.stringify([...epochInformation[i]]));\n    }\n    fs.writeFileSync('log/skippedQueries.json', JSON.stringify([...zeroJoinsFound]) , 'utf-8'); \n}\n\n// NOTE THE PRESENCE OF PREVIOUS QUERY CAUSES NEXT QUERY TO HAVE INCORRECT HIDDENSTATE SIZE!!!"]}