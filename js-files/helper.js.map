{"version":3,"file":"helper.js","sourceRoot":"","sources":["../helper.ts"],"names":[],"mappings":";;;AAGA,SAAgB,oBAAoB,CAAC,iBAAmC,EAAE,QAAgB;IACtF,iBAAiB,CAAC,CAAC,IAAG,CAAC,CAAC;IACxB,MAAM,KAAK,GAAG,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC;IAChD,iBAAiB,CAAC,IAAI,IAAI,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC;IACnD,iBAAiB,CAAC,EAAE,IAAI,KAAK,GAAG,QAAQ,CAAC;IACzC,iBAAiB,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAClF,CAAC;AAPD,oDAOC;AAED,MAAa,gBAAgB;IAOzB,YAAY,OAAe,EAAE,UAAkB;IAE/C,CAAC;IAEM,aAAa,CAAC,QAAgB,EAAE,WAAmB;QACtD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;IAChE,CAAC;IAEM,aAAa,CAAC,QAAgB,EAAE,WAAmB,EAAE,UAAuB;QAC/E,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,EAAC;YAE1C,OAAO;SACV;QACD,uCAAuC;IAE3C,CAAC;CAEJ;AAxBD,4CAwBC","sourcesContent":["import { IAggregateValues, IResultSetRepresentation } from \"@comunica/mediator-join-reinforcement-learning\";\n\n\nexport function updateRunningMoments(toUpdateAggregate: IAggregateValues, newValue: number){\n    toUpdateAggregate.N +=1;\n    const delta = newValue - toUpdateAggregate.mean; \n    toUpdateAggregate.mean += delta / toUpdateAggregate.N;\n    const newDelta = newValue - toUpdateAggregate.mean;\n    toUpdateAggregate.M2 += delta * newDelta;\n    toUpdateAggregate.std = Math.sqrt(toUpdateAggregate.M2 / toUpdateAggregate.N);\n}\n\nexport class experienceBuffer{\n    /**\n     * FIFO query execution buffer operating on principle of FIFO\n     * @param maxSize Maximal number of experiences in buffer\n     */\n    exerienceBuffer: Map<number,Map<string,object>>;\n    queryLeafFeatures: Map<number, IResultSetRepresentation>;\n    constructor(maxSize: number, numQueries: number){\n\n    }\n\n    public getExperience(queryKey: number, joinPlanKey: string){\n        return this.exerienceBuffer.get(queryKey)?.get(joinPlanKey);\n    }\n\n    public setExperience(queryKey: number, joinPlanKey: string, experience: IExperience){\n        if (this.getExperience(queryKey, joinPlanKey)){\n\n            return;\n        }\n        // this.exerienceBuffer.set(queryKey, )\n        \n    }\n\n}\n\nexport interface IExperience{\n    qValue: number;\n    actualExecutionTime: number;\n  }\n  "]}