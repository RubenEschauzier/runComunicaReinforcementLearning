{"version":3,"file":"run_comunica_endpoint.js","sourceRoot":"","sources":["../run_comunica_endpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAggregateValues, IResultSetRepresentation, IRunningMoments } from \"@comunica/mediator-join-reinforcement-learning\";\nimport { BindingsStream, IBatchedTrainingExamples, ITrainingExample } from \"@comunica/types\";\nimport { ExperienceBuffer, IExperience, keyToIdx, updateRunningMoments } from \"./helper\";\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Command to create endpoint:\n// node node_modules/@comunica/query-sparql-file/bin/http.js -c \"{\\\"sources\\\":[\\\"missingGenreOutput/dataset.nt\\\"], \\\"train\\\":true}\"\n\nexport class trainComunicaModel{\n    public engine: any;\n    public queries: string[];\n    public valQueries:string[];\n    public batchedTrainingExamples: IBatchedTrainingExamples;\n    public batchedValidationExamples: IBatchedTrainingExamples;\n    public runningMomentsExecutionTime: IRunningMoments;\n    public experienceBuffer: ExperienceBuffer;\n\n    public constructor(bufferSize: number){\n        const QueryEngine = require('@comunica/query-sparql-file').QueryEngineFactory;\n        this.engine = new QueryEngine().create();\n        this.batchedTrainingExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n        this.batchedValidationExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n        this.queries=[];\n        this.valQueries=[];\n        this.runningMomentsExecutionTime = {indexes: [0], runningStats: new Map<number, IAggregateValues>()};\n        for (const index of this.runningMomentsExecutionTime.indexes){\n            const startPoint: IAggregateValues = {N: 0, mean: 0, std: 1, M2: 1}\n            this.runningMomentsExecutionTime.runningStats.set(index, startPoint);\n        }\n\n        this.experienceBuffer = new ExperienceBuffer(bufferSize, this.queries.length);\n    }\n\n    public async executeQueryTrain(query: string, sources:string[], train:boolean, queryKey: string, runningMomentsFeatureFile?: string){\n        const startTime: number = this.getTimeSeconds();\n        const bindingsStream: BindingsStream = await this.engine.queryBindings(query, {sources: sources, batchedTrainingExamples: this.batchedTrainingExamples,\n        runningMomentsFeatureFile: runningMomentsFeatureFile, train: train});\n        const endTimeSearch = this.getTimeSeconds();\n        if (train){\n            if (this.engine.trainEpisode.joinsMade.length==0){\n                this.engine.disposeTrainEpisode();\n                this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n                return endTimeSearch-startTime;\n                // throw new Error(\"Training episode contained 0 joins\");\n            }\n            const joinOrderKeys: string[] = [];\n            // Get joins made in this query to update\n            for (let i = 1; i <this.engine.trainEpisode.joinsMade.length+1;i++){\n                const joinIndexId = this.engine.trainEpisode.joinsMade.slice(0, i);\n                joinOrderKeys.push(this.idxToKey(joinIndexId));\n            }\n            await this.addListener(bindingsStream, startTime, joinOrderKeys, queryKey, false, true);\n\n            // Clear episode tensors\n            this.engine.disposeTrainEpisode();\n            this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n        }\n        return endTimeSearch-startTime;\n    }\n\n    public async executeQueryValidation(query: string, sources:string[], queryKey: string){\n        const startTime: number = this.getTimeSeconds();\n        const bindingsStream: BindingsStream = await this.engine.queryBindings(query, {sources: sources, \n            batchedTrainingExamples: this.batchedValidationExamples, train: false});\n\n        const joinOrderKeys: string[] = [];\n        for (let i = 1; i <this.engine.trainEpisode.joinsMade.length+1;i++){\n            const joinIndexId = this.engine.trainEpisode.joinsMade.slice(0, i);\n            joinOrderKeys.push(this.idxToKey(joinIndexId));\n        }    \n        const exeuctionTimeRaw: number = await this.addListener(bindingsStream, startTime, joinOrderKeys, queryKey, true, false);\n        this.engine.disposeTrainEpisode();\n        this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n        return exeuctionTimeRaw;\n    }\n\n    public async executeQueryInitFeaturesBuffer(query: string, sources:string[]){\n        const startTime: number = this.getTimeSeconds();\n        const bindingsStream: BindingsStream = await this.engine.queryBindings(query, {sources: sources, \n            batchedTrainingExamples: this.batchedValidationExamples, train: true});\n        const leafFeatures: IResultSetRepresentation = {hiddenStates: this.batchedValidationExamples.leafFeatures.hiddenStates.map(x=>x.clone()),\n        memoryCell: this.batchedValidationExamples.leafFeatures.memoryCell.map(x=>x.clone())};\n\n        this.engine.disposeTrainEpisode();\n        this.engine.trainEpisode = {joinsMade: [], estimatedQValues: [], featureTensor: {hiddenStates:[], memoryCell:[]}, isEmpty:true};    \n        this.cleanBatchTrainingExamplesValidation();\n        return leafFeatures;\n    }\n\n    public cleanBatchTrainingExamples(){\n        this.batchedTrainingExamples.leafFeatures.hiddenStates.map(x =>x.dispose());\n        this.batchedTrainingExamples.leafFeatures.memoryCell.map(x=>x.dispose());\n        this.batchedTrainingExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n    }\n\n    public cleanBatchTrainingExamplesValidation(){\n        this.batchedValidationExamples.leafFeatures.hiddenStates.map(x=>x.dispose());\n        this.batchedValidationExamples.leafFeatures.memoryCell.map(x=>x.dispose());\n        this.batchedValidationExamples = {trainingExamples: new Map<string, ITrainingExample>, leafFeatures: {hiddenStates: [], memoryCell:[]}};\n    }\n\n\n    public async loadWatDivQueries(queryDir: string, val:boolean){\n        const loadingComplete = new Promise<boolean> (async (resolve, reject) => {\n            try {\n                // Get the files as an array\n                const files = await fs.promises.readdir( queryDir );\n                for( const file of files ) {\n                    // Get the full paths\n                    const filePath = path.join( queryDir, file );    \n                    const data = fs.readFileSync(filePath,'utf8');\n                    if (val){\n                        this.valQueries.push(data);\n                    }\n                    else{\n                        this.queries.push(data);\n                    }\n                }\n                resolve(true); \n            }\n            catch( e ) {\n                console.error( \"Something went wrong.\", e );\n                reject();\n            }\n        });\n        return loadingComplete;\n    }\n\n    public getNextVersion(queryDir: string){\n        // Get the next number in the experiments directory\n        const versionsMade = fs.readdirSync( queryDir, { withFileTypes: true })\n        .filter((item) => item.isDirectory())\n        .map((item) => parseInt(item.name.replace(/^\\D+/g, '')));\n\n        if (versionsMade.length==0){\n            return 1;\n        }\n        else{\n            return Math.max(...versionsMade)+1;\n        }\n    }\n\n    public addListener(bindingStream: BindingsStream, startTime: number, joinsMadeEpisode: string[], queryKey: string, \n        validation: boolean, recordExperience: boolean): Promise<number>{\n        /**\n         * Function that consumes the binding stream, measures elapsed time, and updates the batchTrainEpisode\n         */\n        const finishedReading: Promise<number> = new Promise((resolve, reject) => {\n                bindingStream.on('data', (binding: any) => {\n                });\n                \n                bindingStream.on('end', () => {\n                    const endTime: number = this.getTimeSeconds();\n                    const elapsed: number = endTime-startTime;\n                    const statsY: IAggregateValues = this.runningMomentsExecutionTime.runningStats.get(this.runningMomentsExecutionTime.indexes[0])!;\n\n                    if (!validation){\n                        updateRunningMoments(statsY, elapsed);\n                    }\n\n                    const standardisedElapsed = (elapsed - statsY.mean) / statsY.std;\n                    for (const joinMade of joinsMadeEpisode){\n                        const trainingExample: ITrainingExample | undefined = validation ? this.batchedValidationExamples.trainingExamples.get(joinMade) :\n                        this.batchedTrainingExamples.trainingExamples.get(joinMade);\n                        if (!trainingExample){\n                            throw new Error(\"Training example given that is not in batched episode\");\n                        }\n                        const newExperience: IExperience = {actualExecutionTimeRaw: elapsed, actualExecutionTimeNorm: standardisedElapsed, \n                            joinIndexes: keyToIdx(joinMade), N:1};\n                        if (recordExperience){\n                            this.experienceBuffer.setExperience(queryKey, joinMade, newExperience, statsY);\n                        }\n                    }\n                    resolve(elapsed);\n                })    \n        });\n        return finishedReading;\n    }\n\n    public addListenerTimeOut(bindingStream: BindingsStream, startTime: number, joinsMadeEpisode: string[], queryKey: string, \n        validation: boolean, recordExperience: boolean): Promise<number>{\n        /**\n         * Function that consumes the binding stream, measures elapsed time, and updates the batchTrainEpisode\n         */\n        const timeLimit = 1000;\n        let timeOutReached = false;\n        let timeOutHandle: any;\n\n        const timeOutPromise: Promise<number> = new Promise((resolve, reject)=>{\n            timeOutHandle = setTimeout(\n                () => {timeOutReached=true; resolve(timeLimit)},\n                timeLimit\n            );\n        });\n\n        const finishedReading: Promise<number> = new Promise((resolve, reject) => {\n                bindingStream.on('data', (binding: any) => {\n                    if (timeOutReached){\n                        reject();\n                    }\n                });\n                \n                bindingStream.on('end', () => {\n                    console.log(\"ARE WE RUNNING THIS?\")\n                    const endTime: number = this.getTimeSeconds();\n                    const elapsed: number = endTime-startTime;\n                    resolve(elapsed);\n                })    \n        });\n\n        const resolvedPromise = Promise.race([timeOutPromise, finishedReading]).then(result => {\n            clearTimeout(timeOutHandle);\n            const elapsed = result;\n            const statsY: IAggregateValues = this.runningMomentsExecutionTime.runningStats.get(this.runningMomentsExecutionTime.indexes[0])!;\n\n            if (!validation){\n                updateRunningMoments(statsY, elapsed);\n            }\n\n            const standardisedElapsed = (elapsed - statsY.mean) / statsY.std;\n            for (const joinMade of joinsMadeEpisode){\n                const trainingExample: ITrainingExample | undefined = validation ? this.batchedValidationExamples.trainingExamples.get(joinMade) :\n                this.batchedTrainingExamples.trainingExamples.get(joinMade);\n                if (!trainingExample){\n                    throw new Error(\"Training example given that is not in batched episode\");\n                }\n                const newExperience: IExperience = {actualExecutionTimeRaw: elapsed, actualExecutionTimeNorm: standardisedElapsed, \n                    joinIndexes: keyToIdx(joinMade), N:1};\n                if (recordExperience){\n                    this.experienceBuffer.setExperience(queryKey, joinMade, newExperience, statsY);\n                }\n            }\n            console.log(\"Reached timeout!!\");\n            console.log(result);\n            return 0;\n        });\n        return resolvedPromise;\n    }\n\n    public async awaitEngine(){\n        this.engine = await this.engine\n    }\n\n    public getTimeSeconds(){\n        const hrTime: number[] = process.hrtime();\n        const time: number = hrTime[0] + hrTime[1] / 1000000000;\n        return time\n    }\n\n    protected idxToKey(indexes: number[][]){\n        return indexes.flat().toString().replaceAll(',', '');\n    }\n}\n\nconst trainEngine = new trainComunicaModel(1500);\nconst loadingTrain = trainEngine.loadWatDivQueries('missingGenreOutput/queries', false);\nconst loadingValidation = trainEngine.loadWatDivQueries('missingGenreOutput/queriesVal', true);\nError.stackTraceLimit = Infinity;\n\nloadingTrain.then(async ()=>{\n    await loadingValidation;\n    let cleanedQueriesVal: string[][] = trainEngine.valQueries.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT'));\n    let cleanedQueries: string[][] = trainEngine.queries.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT'));\n    for (let i = 0; i<cleanedQueries.length;i++){\n        cleanedQueries[i].shift();\n        cleanedQueriesVal[i].shift();\n        for(let j=0;j<cleanedQueries[i].length;j++){\n            cleanedQueries[i][j] = 'SELECT' + cleanedQueries[i][j];\n        }\n        for(let k=0; k<cleanedQueriesVal[i].length;k++){\n            cleanedQueriesVal[i][k] = 'SELECT' + cleanedQueriesVal[i][k]\n        }\n    }\n\n    await trainEngine.awaitEngine();\n    const test: BindingsStream = await trainEngine.engine.query(cleanedQueries[0][0], {sources: ['http://localhost:3000/sparql'], train:true, queryKey:'00'})\n    // for (let i = 0; i<cleanedQueries.length; i++){\n    //     for (let j = 0; j<cleanedQueries[i].length;j++){\n    //         await trainEngine.engine.querySingleTrainStep(cleanedQueries[i][j], \n    //         {sources: ['missingGenreOutput/dataset.nt'],\n    //         queryKey: `${i}`+`${j}`,\n    //         train: true\n    //         });\n    //     }\n    // }\n});\n\n"]}