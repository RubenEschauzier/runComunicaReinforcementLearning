{"version":3,"file":"comunica_check_single_query.js","sourceRoot":"","sources":["../comunica_check_single_query.ts"],"names":[],"mappings":";AAAA,MAAM,cAAc;IAGhB;QACI,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC,kBAAkB,CAAC;IACxF,CAAC;IAEM,KAAK,CAAC,YAAY;QACrB,iIAAiI;QACjI,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE,CAAC;IAE/D,CAAC;IAEM,cAAc;QACjB,MAAM,MAAM,GAAa,OAAO,CAAC,MAAM,EAAE,CAAC;QAC1C,MAAM,IAAI,GAAW,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;QACxD,OAAO,IAAI,CAAA;IACf,CAAC;CAEJ;AAGD,MAAM,KAAK,GAAG;;;;;EAKZ,CAAA;AAEF,MAAM,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;AACpC,MAAM,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;IAClC,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;IAC1C,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,mBAAmB,CAAC,EAAC,CAAC,CAAC;IAChG,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,MAAM,aAAa,GAAa,EAAE,CAAC;IACnC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,GAAQ,EAAE,EAAE;QACjC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACxB,UAAU,IAAI,CAAC,CAAC;QAChB,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC,CAAA;IAC3D,CAAC,CAAC,CAAC;IACH,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACxB,MAAM,OAAO,GAAG,MAAM,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC;QACpD,OAAO,CAAC,GAAG,CAAC,yBAAyB,OAAO,EAAE,CAAC,CAAC;QAChD,OAAO,CAAC,GAAG,CAAC,sBAAsB,UAAU,EAAE,CAAC,CAAC;QAChD,OAAO,CAAC,GAAG,CAAC,gCAAgC,aAAa,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAA","sourcesContent":["class runExperiments{\n    public engine: any;\n    public queryEngineFactory: any;\n    public constructor(){\n        this.queryEngineFactory = require(\"@comunica/query-sparql-file\").QueryEngineFactory;\n    }\n\n    public async createEngine(){\n        // this.engine = await new this.queryEngineFactory().create({configPath: \"configFiles/config-default-variable-priorities.json\"});\n        this.engine = await new this.queryEngineFactory().create();\n\n    }\n\n    public getTimeSeconds(){\n        const hrTime: number[] = process.hrtime();\n        const time: number = hrTime[0] + hrTime[1] / 1000000000;\n        return time\n    }\n\n}\n\n\nconst query = `SELECT ?v0 ?v1 ?v3 WHERE {\n\t?v0 <http://purl.org/dc/terms/Location> ?v1 .\n\t?v0 <http://schema.org/nationality> <http://db.uwaterloo.ca/~galuc/wsdbm/Country24> .\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/gender> ?v3 .\n\t?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://db.uwaterloo.ca/~galuc/wsdbm/Role2> .\n}`\n\nconst runner = new runExperiments();\nrunner.createEngine().then(async () => {\n    const startTime = runner.getTimeSeconds();\n    const outputStream = await runner.engine.queryBindings(query, {sources: [\"output/dataset.nt\"]});\n    let numResults = 0;\n    const timingResults: number[] = [];\n    outputStream.on('data', (res: any) => {\n        console.log(res.entries)\n        numResults += 1;\n        timingResults.push(runner.getTimeSeconds() - startTime)\n    });\n    outputStream.on('end', () =>{\n        const elapsed = runner.getTimeSeconds() - startTime;\n        console.log(`Total execution time: ${elapsed}`);\n        console.log(`Number of results: ${numResults}`);\n        console.log(`Result arrival distribution: ${timingResults}`);\n    });\n    \n})\n\n"]}